#summary Determining if a physical interface corresponds to a web page

= Correspondence =

This is a method of verifying that a program resident on a microcontroller [http://en.wikipedia.org/wiki/Correspondence_(theology) corresponds] to a particular web page.

== Example ==

The example [http://wiring.org.co/ Wiring]/[http://www.arduino.cc/ Arduino] code below corresponds to this [http://zambetti.com/projects/seriality/examples/correspondence.html test page]. Visit the page while a Wiring or Arduino board is connected and running the program provided below.

=== Wiring/Arduino ===

{{{
void setup()
{
  Serial.begin(9600);
}

void loop()
{
  char in;
  if (Serial.available()) {
    in = Serial.read();
    // process correspondence request
    if (in == '@') {
      // reply with correspondence identifier
      Serial.print("{'domain':'zambetti.com'}");
    }
  }
}
}}}

= How it works =

The `verifyPhysicalInterface()` javascript function (in the [http://zambetti.com/projects/seriality/examples/correspondence.html test page] and described below) issues a correspondence request and processes the resulting correspondence identifier received via the serial port.

== Correspondence Request ==

The '@' character is used to request the correspondence identifier from an attached serial device. A JSON-formatted correspondence identifier is expected in return.

== Correspondence Identifiers ==

There are two types of correspondence
  * *Path correspondence* for path-specific physical interfaces
  * *Domain correspondence* for domain-wide physical interfaces

For a physical interface to be verified as corresponding to a web page, the correspondence identifier returned after a correspondence request must match what is expected by the page.

=== domain ===

The `domain` property states which web domain the physical interface corresponds to. It can also contain subdomains (eg: foo.example.com) to be more targeted. The `domain` property is the only required property of a correspondence identifier.

Domain correspondence identifier (Wiring/Arduino)
{{{
Serial.print("{'domain':'example.com'}");
}}}

How to verify a physical interface for domain correspondence (Javascript)
{{{
if (verifyPhysicalInterface() ) {
  alert("Correct physical interface for this domain");
}
}}}

=== path ===

The `path` property states which path the physical interface corresponds to in the given domain. It can contain paths to directories or specific pages.

Path correspondence identifier (Wiring/Arduino)
{{{
Serial.print("{'domain':'example.com','path':'/path/to/page.html'}");
}}}

How to verify a physical interface for path correspondence (Javascript)
{{{
// enable strict mode for path correspondence
if (verifyPhysicalInterface(true) ) {
  alert("Correct physical interface for this path");
}
}}}

=== version ===

Additionally, a `version` property is provided to allow for various releases of firmware that correspond to the same domain or path. This can be used to prompt users to update their firmware as needed.

Domain correspondence identifier with version property (supplied by device)
{{{
Serial.print("{'domain':'example.com','version':1}");
}}}

Path correspondence identifier with version property (supplied by device)
{{{
Serial.print("{'domain':'example.com','path':'/path/to/page.html','version':1}");
}}}

How to invoke the verification function to enforce versioning (javascript)
{{{
// domain correspondence with version check
if (verifyPhysicalInterface(false, 1) ) {
  alert("Correct physical interface for this domain");
}

// path correspondence with version check
if (verifyPhysicalInterface(true, 1) ) {
  alert("Correct physical interface for this path");
}
}}}

== Usage ==

Here is the source code of the [http://zambetti.com/projects/seriality/examples/correspondence.html test page]. Visit the test page while a Wiring or Arduino board is connected and running the program provided at the top of this page.

=== HTML/JS/Seriality ===

{{{
<html>
<head>

  <script type="text/javascript">

    // create global reference
    var serial;
  
    function setup()
    {
      // instantiate seriality
      serial = (document.getElementById("seriality")).Seriality();

      // begin serial communications on first known serial port at 9600 baud, bail on failure
      if (!serial.begin(serial.ports[0], 9600)) {
        alert("No physical interface");
        return;
      }

      // verify that the physical interface corresponds to this web page, bail on failure
      if (!verifyPhysicalInterface()) {
        alert("Incorrect physical interface");
        serial.end();
        return;
      }

      // physical interface corresponds to this web page
      alert("Correct physical interface");
    }
    
    // utility function to request and parse the correspondence identifier
    function verifyPhysicalInterface(strict, version)
    {
      // request the correspondence identifier
      serial.write("@");

      // allow time for the response (100ms)
      var now = new Date();
      var then = new Date();
      while (now - then < 100) {
        now = new Date();
      }

      // optional parameter for physical interface versioning
      if (undefined === version) {
        version = 0;
      }

      // optional parameter to allow for path correspondence
      if (undefined === strict) {
        strict = false;
      }

      // parse correspondence identifier
      if (serial.available()) {
        var identifier = eval('(' + serial.readJSON() + ')');
        if (undefined === identifier) {
          return false;
        }
        if (version > 0) {
          if (undefined === identifier.version) {
            return false;
          }
          if (identifier.version < version) {
            return false;
          }
        }
        if (-1 == location.host.indexOf(identifier.domain)) {
          return false;
        }
        if (strict) {
          if (0 != location.pathname.indexOf(identifier.path)) {
            return false;
          }
        }
        return true;
      }
      return false;
    }

  </script>

</head>
<body onload="setup();">

  <object type="application/Seriality" id="seriality" width="0" height="0"></object>

</body>
</html>
}}}